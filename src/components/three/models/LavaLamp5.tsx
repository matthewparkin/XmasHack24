/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.18 --transform public/LavaLamp5.glb --types --meta --shadows 
Files: public/LavaLamp5.glb [94.47KB] > /Users/matthew.parkin/Documents/repos/reactThreeFiberIntro/LavaLamp5-transformed.glb [61.78KB] (35%)
*/

import * as THREE from "three";
import React, { useState } from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";

type GLTFResult = GLTF & {
  nodes: {
    Base: THREE.Mesh;
    Glass: THREE.Mesh;
    Parkin001: THREE.Mesh;
  };
  materials: {
    Metal: THREE.MeshStandardMaterial;
    glassPurple: THREE.MeshPhysicalMaterial;
    ["text.002"]: THREE.MeshPhysicalMaterial;
  };
};

export function LavaLamp5(props: JSX.IntrinsicElements["group"]) {
  // Hold state for hovered and clicked events
  const [hovered, hover] = useState(false);

  const { nodes, materials } = useGLTF(
    "/LavaLamp5-transformed.glb",
  ) as GLTFResult;

  materials.glassPurple.transmission = 1.1;
  // materials.glassPurple.clearcoat = 1;
  materials.glassPurple.transparent = true;
  materials.glassPurple.thickness = 0.2;
  materials.glassPurple.roughness = 0.1;
  materials.glassPurple.emissiveIntensity = 0.1;
  materials.glassPurple.iridescence = 1;
  materials.glassPurple.sheen = 0;
  materials.glassPurple.iridescenceIOR = 1.6;
  materials.glassPurple.alphaToCoverage = true;
  materials.glassPurple.reflectivity = 1;

  materials.glassPurple.reflectivity = 1;

  // materials["text.002"].roughness = 0.1;
  materials.Metal.roughness = 0.3;
  materials.Metal.metalness = 0.4;

  if (hovered) {
    materials.glassPurple.color = new THREE.Color("#ff00ff");

    materials.glassPurple.emissive = new THREE.Color("#ff0000");
  } else {
    materials.glassPurple.emissive = new THREE.Color("#000000");

    materials.glassPurple.color = new THREE.Color("#ffffff");
  }

  return (
    <group {...props} dispose={null}>
      {hovered ? (
        <pointLight
          intensity={100.082}
          decay={1}
          color="#ff00ff"
          position={[0, -0.587, 0]}
          rotation={[-Math.PI / 2, 0, 0]}
          userData={{ name: "Point" }}
          castShadow
        />
      ) : null}

      <mesh
        // castShadow
        receiveShadow
        geometry={nodes.Base.geometry}
        material={materials.Metal}
        userData={{ name: "Base" }}
      />
      <mesh
        castShadow
        receiveShadow
        material={materials.glassPurple}
        geometry={nodes.Glass.geometry}
        position={[0, -0.081, 0]}
        scale={[0.943, 1.035, 0.943]}
        userData={{ name: "Glass" }}
        onPointerOver={(event) => (event.stopPropagation(), hover(true))}
        onPointerOut={() => hover(false)}
      />

      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Parkin001.geometry}
        material={materials["text.002"]}
        position={[-0.03, 0.792, -0.007]}
        rotation={[Math.PI / 2, 0, 0]}
        scale={0.337}
        userData={{ name: "Parkin.001" }}
      />

      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Parkin001.geometry}
        material={materials.Metal}
        position={[-0.03, 0.792, -0.007]}
        rotation={[Math.PI / 2, 0, 0]}
        scale={0.337}
        userData={{ name: "Parkin.001" }}
      />
    </group>
  );
}

useGLTF.preload("/LavaLamp5-transformed.glb");
